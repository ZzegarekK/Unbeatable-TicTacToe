#setup
player = None

import os
import time
def cls(): os.system('clear')

def rgbTXT(r, g, b): return f"\u001b[38;2;{r};{g};{b}m"
def rgbBG(r, g, b): return f"\u001b[48;2;{r};{g};{b}m"
BOLD = "\033[1m"; REVERT = "\033[0m"; DEFAULT = BOLD+rgbBG(0,0,0)+rgbTXT(255,0,0)

print(DEFAULT)
cls()

class marks:
    a = " "
    b = " "
    c = " "
    d = " "
    e = " "
    f = " "
    g = " "
    h = " "
    i = " "

score = {"X": 0, "O": 0, "Tie": 0}

def board():
    print("===============================================================================\n Score: X (You) = "+str(score["X"])+", O (Me) = "+str(score["O"])+", Ties = "+str(score["Tie"])+"\n===============================================================================\n  a | b | c \n ---+---+---\n  d | e | f \n ---+---+---\n  g | h | i \n===============================================================================")

def trueBoard():
    print("  "+marks.a+" | "+marks.b+" | "+marks.c+" \n ---+---+---\n  "+marks.d+" | "+marks.e+" | "+marks.f+" \n ---+---+---\n  "+marks.g+" | "+marks.h+" | "+marks.i+" \n===============================================================================")

def colorize(inp): return rgbTXT(255,255,255)+inp+DEFAULT

def findWin():
    if marks.g == marks.h == marks.i in "XO": marks.g=marks.h=marks.i= colorize(marks.g)
    elif marks.d == marks.e == marks.f in "XO": marks.d=marks.e=marks.f= colorize(marks.d)
    elif marks.a == marks.b == marks.c in "XO": marks.a=marks.b=marks.c= colorize(marks.a)
    
    elif marks.a == marks.d == marks.g in "XO": marks.a=marks.d=marks.g= colorize(marks.a)
    elif marks.b == marks.e == marks.h in "XO": marks.b=marks.e=marks.h= colorize(marks.b)
    elif marks.c == marks.f == marks.i in "XO": marks.c=marks.f=marks.i= colorize(marks.c)
    
    elif marks.a == marks.e == marks.i in "XO": marks.a=marks.e=marks.i= colorize(marks.a)
    elif marks.c == marks.e == marks.g in "XO": marks.c=marks.e=marks.g= colorize(marks.c)
    
    print("  "+marks.a+" | "+marks.b+" | "+marks.c+" "+"\n ---+---+---\n  "+marks.d+" | "+marks.e+" | "+marks.f+"  \n ---+---+---\n  "+marks.g+" | "+marks.h+" | "+marks.i+" \n===============================================================================")

def clrWin():
    cls()
    board()
    findWin()

def check(mark):
    try: getattr(marks, mark)
    except: return False
    else:
        if getattr(marks, mark) == " ": return True
        else: return None

def quickCheck(x):
    if getattr(marks, x) == " ": setattr(marks, x, "O"); return True
    else: return False

def clr():
    cls()
    board()
    trueBoard()

def checkOpposingWin():
    if ((marks.a == "X" and marks.c == "X") or (marks.e == "X" and marks.h == "X")) and check("b"): return "b"
    elif ((marks.g == "X" and marks.i == "X") or (marks.b == "X" and marks.e == "X")) and check("h"): return "h"
    elif ((marks.a == "X" and marks.g == "X") or (marks.e == "X" and marks.f == "X")) and check("d"): return "d"
    elif ((marks.c == "X" and marks.i == "X") or (marks.d == "X" and marks.e == "X")) and check("f"): return "f"
    elif ((marks.d == "X" and marks.f == "X") or (marks.a == "X" and marks.i == "X") or (marks.g == "X" and marks.c == "X") or (marks.b == "X" and marks.h == "X")) and check("e"): return "e"
    elif ((marks.a == "X" and marks.b == "X") or (marks.f == "X" and marks.i == "X") or (marks.e == "X" and marks.g == "X")) and check("c"): return "c"
    elif ((marks.b == "X" and marks.c == "X") or (marks.d == "X" and marks.g == "X") or (marks.e == "X" and marks.i == "X")) and check("a"): return "a"
    elif ((marks.g == "X" and marks.h == "X") or (marks.c == "X" and marks.f == "X") or (marks.a == "X" and marks.e == "X")) and check("i"): return "i"
    elif ((marks.h == "X" and marks.i == "X") or (marks.a == "X" and marks.d == "X") or (marks.c == "X" and marks.e == "X")) and check("g"): return "g"
    else: return None

def checkWin():
    if ((marks.a == "O" and marks.c == "O") or (marks.e == "O" and marks.h == "O")) and check("b"): return "b"
    elif ((marks.g == "O" and marks.i == "O") or (marks.b == "O" and marks.e == "O")) and check("h"): return "h"
    elif ((marks.a == "O" and marks.g == "O") or (marks.e == "O" and marks.f == "O")) and check("d"): return "d"
    elif ((marks.c == "O" and marks.i == "O") or (marks.d == "O" and marks.e == "O")) and check("f"): return "f"
    elif ((marks.d == "O" and marks.f == "O") or (marks.a == "O" and marks.i == "O") or (marks.g == "O" and marks.c == "O") or (marks.b == "O" and marks.h == "O")) and check("e"): return "e"
    elif ((marks.a == "O" and marks.b == "O") or (marks.f == "O" and marks.i == "O") or (marks.e == "O" and marks.g == "O")) and check("c"): return "c"
    elif ((marks.b == "O" and marks.c == "O") or (marks.d == "O" and marks.g == "O") or (marks.e == "O" and marks.i == "O")) and check("a"): return "a"
    elif ((marks.g == "O" and marks.h == "O") or (marks.c == "O" and marks.f == "O") or (marks.a == "O" and marks.e == "O")) and check("i"): return "i"
    elif ((marks.h == "O" and marks.i == "O") or (marks.a == "O" and marks.d == "O") or (marks.c == "O" and marks.e == "O")) and check("g"): return "g"
    else: return None

def move1(player):
    if not player:
        setattr(marks, "a", "O")
        clr()#######################################################
        while True:
            mark = input(" Place your mark at: ").lower()
            available = check(mark)
            if available:
                setattr(marks, mark, "X")
                clr()
                return mark
            elif available == None: clr(); print(" That space is taken\n===============================================================================")
            else: clr(); print(" Invalid input\n===============================================================================")
    else:
        clr()
        while True:
            mark = input(" Place your mark at: ")
            available = check(mark)
            if available:
                setattr(marks, mark, "X")
                #########################################################################
                if mark in "abcdfghi": setattr(marks, "e", "O")
                elif mark in "e": setattr(marks, "a", "O")
                clr()
                return mark
            elif available == None: clr(); print(" That space is taken\n===============================================================================")
            else: clr(); print(" Invalid input\n===============================================================================")

def move2(last1, player):
    if not player:
        if last1 in "bf": setattr(marks, "g", "O")
        elif last1 in "ceg": setattr(marks, "i", "O")
        elif last1 in "dhi": setattr(marks, "c", "O")
        clr()#######################################################
        while True:
            mark = input(" Place your mark at: ").lower()
            available = check(mark)
            if available:
                setattr(marks, mark, "X")
                clr()
                return mark
            elif available == None: clr(); print(" That space is taken\n===============================================================================")
            else: clr(); print(" Invalid input\n===============================================================================")
    else:
        while True:
            mark = input(" Place your mark at: ")
            available = check(mark)
            if available:
                setattr(marks, mark, "X")
                #########################################################################
                if checkOpposingWin(): setattr(marks, checkOpposingWin(), "O")
                
                elif last1 in "acgi" and mark in "acgi": setattr(marks, "b", "O")
                elif (last1 in "e") or (last1 in "abfi" and mark in "abfi") or (last1 in "g" and mark in "bf"): setattr(marks, "c", "O")
                
                elif (last1 in "a" and mark in "fh") or (last1 in "cfgh" and mark in "cfgh"): setattr(marks, "i", "O")
                elif (last1 in "c" and mark in "dh") or (last1 in "adhi" and mark in "adhi"): setattr(marks, "g", "O")
                elif (last1 in "i" and mark in "bd") or (last1 in "bcdg" and mark in "bdcg"): setattr(marks, "a", "O")
                
                else: setattr(marks, "a", "O")
                clr()
                return mark
            elif available == None: clr(); print(" That space is taken\n===============================================================================")
            else: clr(); print(" Invalid input\n===============================================================================")

def move3(last1, last2, player):
    if not player:
        pathFound = False
        if checkWin(): setattr(marks, checkWin(), "O"); clr(); return True, False, None
        elif last1 in "cg" or (last1 in "e" and last2 in "cg"): setattr(marks, checkOpposingWin(), "O")
        elif (last1 in "bd" and last2 in "bd") or (last1 in "fh" and last2 in "bd"): setattr(marks, "e", "O")
        elif last1 in "i" and last2 in "b": setattr(marks, "g", "O")
        
        if last1 in "e" and last2 in "bdfh": setattr(marks, checkOpposingWin(), "O"); pathFound = True
        clr()#######################################################
        while True:
            mark = input(" Place your mark at: ").lower()
            available = check(mark)
            if available:
                setattr(marks, mark, "X")
                clr()
                return False, pathFound, mark
            elif available == None: clr(); print(" That space is taken\n===============================================================================")
            else: clr(); print(" Invalid input\n===============================================================================")
    else:
        while True:
            mark = input(" Place your mark at: ")
            available = check(mark)
            if available:
                setattr(marks, mark, "X")
                #########################################################################
                if checkWin(): setattr(marks, checkWin(), "O"); return True, False, mark
                elif checkOpposingWin(): setattr(marks, checkOpposingWin(), "O")
                elif last1 in "acgi" and last2 in "acgi" and mark in "bdfh":
                    if check("b"): setattr(marks, "b", "O")
                    elif check("d"): setattr(marks, "d", "O")
                    else: True
                else:
                    if check("a"): setattr(marks, "a", "O")
                    elif check("c"): setattr(marks, "c", "O")
                clr()
                return False, False, mark
            elif available == None: clr(); print(" That space is taken\n===============================================================================")
            else: clr(); print(" Invalid input\n===============================================================================")

def move4(pathFound, player):
    if not player:
        win = False
        if pathFound:
            if checkWin(): setattr(marks, checkWin(), "O"); win = True
            else:
                setattr(marks, checkOpposingWin(), "O")
        else:
            setattr(marks, checkWin(), "O"); win = True
        clr()#######################################################
        if not win:
            while True:
                mark = input(" Place your mark at: ").lower()
                available = check(mark)
                if available:
                    setattr(marks, mark, "X")
                    clr()
                    break
                elif available == None: clr(); print(" That space is taken\n===============================================================================")
                else: clr(); print(" Invalid input\n===============================================================================")
        return win
    else:
        while True:
            mark = input(" Place your mark at: ")
            available = check(mark)
            if available:
                setattr(marks, mark, "X")
                #########################################################################
                if checkWin(): setattr(marks, checkWin(), "O"); return True
                elif checkOpposingWin(): setattr(marks, checkOpposingWin(), "O")
                else:
                    for x in "abcdefghi":
                        if quickCheck(x): break ########################################################### THIS IS BROKEN AND NEEDS TO BE FIXED BECAUSE QUICKCHECK WAS DELETED
                clr()
                return None
            elif available == None: clr(); print(" That space is taken\n===============================================================================")
            else: clr(); print(" Invalid input\n===============================================================================")

def move5(player):
    if not player:
        if checkWin(): setattr(marks, checkWin(), "O"); win = True
        else: setattr(marks, checkOpposingWin(), "O"); win = None
        clr(); return win
    else:
        while True:
            mark = input(" Place your mark at: ")
            available = check(mark)
            if available:
                setattr(marks, mark, "X")
                clr()
                return None
            elif available == None: clr(); print(" That space is taken\n===============================================================================")
            else: clr(); print(" Invalid input\n===============================================================================")

def game():
    global player
    win = False
    last1 = move1(player)
    last2 = move2(last1, player)
    win, pathFound, last3 = move3(last1, last2, player)
    if not win:
        win = move4(pathFound, player)
        if not win:
            win = move5(player)
    if win == True: score["O"] += 1
    elif win == None: score["Tie"] += 1
    elif win == True: score["X"] += 1
    clrWin()
    if win == True: print(" I win\n===============================================================================")
    elif win == None: print(" Tie\n===============================================================================")
    elif win == False: print(" You must have messed with the program to win, Good for you\n===============================================================================")


clr()
while True:
    swap = input("Do you want to swap who goes first each round? (Y/N): ").upper()
    if len(swap) == 1 and swap in "YN": break
    clr()
    print(" Invalid input\n===============================================================================")

if swap == "N":
    clr()
    while True:
        const = input("Do you want your player selection to go first every round? (Y/N): ").upper()
        if len(const) == 1 and const in "YN": break
        clr()
        print(" Invalid input\n===============================================================================")
else: const = "/"

clr()
while True:
    if swap in "YN" or const in "YN":
        clr()
        while True:
            plr = input("Do you want to go first? (Y/N): ").upper()
            if plr == "":
                if player == True: plr = "Y"
                elif player == False: plr = "N"
            if len(plr) == 1 and plr in "YN": break
            clr()
            print(" Invalid input\n===============================================================================")
        if plr == "Y": player = True
        elif plr == "N": player = False
        
        if swap == "Y": swap = "."
        if const == "Y": const = "."; swap = "/"
    
    game()
    while True:
        replay = input("Do you want to play again? (Y/N): ").upper()
        if replay == "": replay = "Y"
        if len(replay) == 1 and replay in "YN": break
        clrWin()
        print(" Invalid input\n===============================================================================")
    if replay == "N": break
    
    if swap == ".": player = not player
    
    marks.a=marks.b=marks.c=marks.d=marks.e=marks.f=marks.g=marks.h=marks.i= " "



step = 75 # how far the RGB values increase/decrease every frame
dimBG = 5 # how dark the background will be (divides RGB values by this value)
frameDelay = 0.1 # delay between frames

def colorChange(color, inst):
    print(rgbBG(round(color["1"]/dimBG), round(color["2"]/dimBG), round(color["0"]/dimBG))+rgbTXT(color["1"],color["2"],color["0"]))
    cls()
    print("===============================================================================\n Final Score: X (You) = "+str(score["X"])+", O (Me) = "+str(score["O"])+", Ties = "+str(score["Tie"])+"   ||   Frames: "+str(inst)+"\n===============================================================================")
    print("""\n\n\n\n\n\n\n\n\n\n\n
                                     ###
                                    ## ##
                                   ##   ##
                                   ##   ##
                                    ## ##
                                     ###
                                 ##### #####
                               ###   ###   ###
                              ##    ## ##    ##
                              ##   ##   ##   ##
                               #####     #####
    \n\n
                              #####       #####
                             #######     #######
                            ###   ###   ###   ###
                            ##          ##
                            ##   ####   ##   ####
                            ###    ##   ###    ##
                             #######     #######
                              #####       #####""")

inst = 1
while True:
    color = {"1": 255, "2": 0, "0": 0}
    for col in range(6):
        if col%2 == 0:
            for val in range(0,255,step):
                color[str(col%3)] = val
                inst += 1
                colorChange(color, inst)
                time.sleep(frameDelay)
        else:
            for val in range(255,0,-step):
                color[str(col%3)] = val
                inst += 1
                colorChange(color, inst)
                time.sleep(frameDelay)
    time.sleep(frameDelay)
